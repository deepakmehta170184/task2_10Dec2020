[{"C:\\xampp\\htdocs\\task2_10Dec2020\\src\\index.js":"1","C:\\xampp\\htdocs\\task2_10Dec2020\\src\\App.js":"2","C:\\xampp\\htdocs\\task2_10Dec2020\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\task2_10dec2020\\src\\index.js":"4","C:\\xampp\\htdocs\\task2_10dec2020\\src\\App.js":"5","C:\\xampp\\htdocs\\task2_10dec2020\\src\\reportWebVitals.js":"6","C:\\xampp\\htdocs\\task2_10dec2020\\src\\component\\HomeData.jsx":"7","C:\\xampp\\htdocs\\task2_10dec2020\\src\\component\\Pagination.jsx":"8","C:\\xampp\\htdocs\\task2_10dec2020\\src\\component\\util\\FetchHomeData.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":528,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":568,"mtime":1608017369046,"results":"14","hashOfConfig":"15"},{"size":192,"mtime":1608017532324,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1607966111492,"results":"17","hashOfConfig":"15"},{"size":3326,"mtime":1608224930434,"results":"18","hashOfConfig":"15"},{"size":406,"mtime":1608018116152,"results":"19","hashOfConfig":"15"},{"size":309,"mtime":1608224743825,"results":"20","hashOfConfig":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yjeivm",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1ef36jm",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\xampp\\htdocs\\task2_10Dec2020\\src\\index.js",[],"C:\\xampp\\htdocs\\task2_10Dec2020\\src\\App.js",[],"C:\\xampp\\htdocs\\task2_10Dec2020\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\task2_10dec2020\\src\\index.js",[],["42","43"],"C:\\xampp\\htdocs\\task2_10dec2020\\src\\App.js",[],"C:\\xampp\\htdocs\\task2_10dec2020\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\task2_10dec2020\\src\\component\\HomeData.jsx",["44","45","46","47","48"],"import React, { useEffect, useState } from 'react';\r\nimport _ from 'lodash';\r\nimport { DataTable, LoadingIndicator } from 'lucid-ui';\r\nimport Pagination from './Pagination';\r\nimport fetchHomeData from './util/FetchHomeData';\r\n\r\nconst HomeData = (props) => {\r\n\tconst [gridData, setGridData] = useState([]);\r\n\tconst [hasError, setHasError] = useState(false);\r\n\tconst [isLoading, setLoading] = useState(true);\r\n\tconst [overlayKind, setOverlayKind] = useState('dark');\r\n\tconst [activeIndex, setActiveIndex] = useState(1);\r\n\tconst [currentlySortedField, setCurrentlySortedField] = useState('id');\r\n\tconst [\r\n\t\tcurrentlySortedFieldDirection,\r\n\t\tsetCurrentlySortedFieldDirection,\r\n\t] = useState('down');\r\n\r\n\tconst [currentPage, setCurrentPage] = useState(1);\r\n\tconst [usersPerPage, setUsersPerPage] = useState(5);\r\n\r\n\tconst [jsonColumn, setJsonColumn] = useState([\r\n\t\t{ col: 'id', width: '70' },\r\n\t\t{ col: 'name', width: '120' },\r\n\t\t{ col: 'username', width: '120' },\r\n\t\t{ col: 'email', width: '120' },\r\n\t\t{ col: 'phone', width: '140' },\r\n\t\t{ col: 'website', width: '120' },\r\n\t]);\r\n\r\n\tuseEffect(async () => {\r\n\t\tconst fetchData = await fetchHomeData();\r\n\t\tif (fetchData) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetGridData(fetchData);\r\n\t\t} else {\r\n\t\t\tsetHasError('Error while getting response from the api');\r\n\t\t}\r\n\t}, [setGridData]);\r\n\r\n\tconst handleRowClick = (rowIndex) => {\r\n\t\tsetActiveIndex(rowIndex);\r\n\t};\r\n\r\n\tconst handleSort = (field) => {\r\n\t\tconst nextCurrentlySortedFieldDirection =\r\n\t\t\tcurrentlySortedField === field && currentlySortedFieldDirection === 'up'\r\n\t\t\t\t? 'down'\r\n\t\t\t\t: 'up';\r\n\t\tconst nextData = _.sortBy(gridData, field);\r\n\r\n\t\tsetCurrentlySortedField(field);\r\n\t\tsetCurrentlySortedFieldDirection(nextCurrentlySortedFieldDirection);\r\n\t\tsetGridData(\r\n\t\t\tnextCurrentlySortedFieldDirection === 'down'\r\n\t\t\t\t? nextData\r\n\t\t\t\t: _.reverse(nextData)\r\n\t\t);\r\n\t\tsetActiveIndex(null);\r\n\t};\r\n\r\n\tconst indexOfLastUser = currentPage * usersPerPage; //5\r\n\tconst indexOfFirstUser = indexOfLastUser - usersPerPage; //0\r\n\tconst currentGridData = gridData.slice(indexOfFirstUser, indexOfLastUser);\r\n\r\n\tconst paginate = (pageNumber) => {\r\n\t\tsetCurrentPage(pageNumber + 1);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{hasError ? (\r\n\t\t\t\t<div>Error occured.</div>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h2>Sample Data Grid</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='mainDiv'>\r\n\t\t\t\t\t\t<LoadingIndicator\r\n\t\t\t\t\t\t\tisLoading={isLoading}\r\n\t\t\t\t\t\t\toverlayKind={overlayKind}\r\n\t\t\t\t\t\t></LoadingIndicator>\r\n\t\t\t\t\t\t<DataTable\r\n\t\t\t\t\t\t\tdata={_.map(currentGridData, (row, index) =>\r\n\t\t\t\t\t\t\t\tindex === activeIndex\r\n\t\t\t\t\t\t\t\t\t? { ...row, isActive: true, key: index }\r\n\t\t\t\t\t\t\t\t\t: row\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\tisActionable\r\n\t\t\t\t\t\t\tdensity='extended'\r\n\t\t\t\t\t\t\tonRowClick={handleRowClick}\r\n\t\t\t\t\t\t\tonSort={handleSort}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{_.map(jsonColumn, (row, pos) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<DataTable.Column\r\n\t\t\t\t\t\t\t\t\t\tfield={`${row.col}`}\r\n\t\t\t\t\t\t\t\t\t\talign='left'\r\n\t\t\t\t\t\t\t\t\t\twidth={`${row.width}`}\r\n\t\t\t\t\t\t\t\t\t\talign='left'\r\n\t\t\t\t\t\t\t\t\t\thasBorderLeft\r\n\t\t\t\t\t\t\t\t\t\tisSortable\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{_.upperCase(row.col)}\r\n\t\t\t\t\t\t\t\t\t</DataTable.Column>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</DataTable>\r\n\t\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\t\ttotalCount={gridData.length}\r\n\t\t\t\t\t\t\tusersPerPage={usersPerPage}\r\n\t\t\t\t\t\t\tpaginate={paginate}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default HomeData;\r\n","C:\\xampp\\htdocs\\task2_10dec2020\\src\\component\\Pagination.jsx",[],["49","50"],"C:\\xampp\\htdocs\\task2_10dec2020\\src\\component\\util\\FetchHomeData.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":11,"column":22,"nodeType":"57","messageId":"58","endLine":11,"endColumn":36},{"ruleId":"55","severity":1,"message":"59","line":20,"column":23,"nodeType":"57","messageId":"58","endLine":20,"endColumn":38},{"ruleId":"55","severity":1,"message":"60","line":22,"column":21,"nodeType":"57","messageId":"58","endLine":22,"endColumn":34},{"ruleId":"61","severity":1,"message":"62","line":31,"column":12,"nodeType":"63","endLine":39,"endColumn":3},{"ruleId":"64","severity":1,"message":"65","line":101,"column":11,"nodeType":"66","endLine":101,"endColumn":23},{"ruleId":"51","replacedBy":"67"},{"ruleId":"53","replacedBy":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'setOverlayKind' is assigned a value but never used.","Identifier","unusedVar","'setUsersPerPage' is assigned a value but never used.","'setJsonColumn' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["69"],["70"],"no-global-assign","no-unsafe-negation"]
